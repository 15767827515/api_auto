<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="7" time="8.654" timestamp="2024-02-29T10:45:08.646171" hostname="REDMI-PRO-YN"><testcase classname="testcase.CrmLogin.test_crm_login.TestCrmLogin" name="test_crmlogin[baseinfo0-testdata0]" time="0.579" /><testcase classname="testcase.CrmLogin.test_crm_login.TestCrmLogin" name="test_crmlogin[baseinfo1-testdata1]" time="0.156" /><testcase classname="testcase.CrmLogin.test_crm_login.TestCrmLogin" name="test_crmlogin[baseinfo2-testdata2]" time="0.054" /><testcase classname="testcase.FileUpload.test_uploadfile.TestUploadfile" name="test_upload_file[baseinfo0-testdata0]" time="0.430" /><testcase classname="testcase.FileUpload.test_uploadfile.TestUploadfile" name="test_upload_file[baseinfo1-testdata1]" time="0.284" /><testcase classname="testcase.Invoice_Inspection.test_invoice_Inspection.TestInvoiceInspection" name="test_upload_file[baseinfo0-testdata0]" time="6.800" /><testcase classname="testcase.Invoice_Inspection.test_invoice_Inspection.TestInvoiceInspection" name="test_invoice_inspection[baseinfo0-testdata0]" time="0.113"><failure message="AssertionError">self = &lt;test_invoice_Inspection.TestInvoiceInspection object at 0x000002A9B46FFC20&gt;
baseinfo = {'api_name': '发票上传', 'feature_name': '发票识别查验', 'header': None, 'method': 'get', ...}
testdata = {}

    @pytest.mark.smoke
    @pytest.mark.parametrize(('baseinfo,testdata'),
                             read_test_yaml(ROOT_PATH + r"\testcase\Invoice_Inspection\Invoice_upload.yaml"))
    def test_invoice_inspection(self, baseinfo, testdata):
&gt;       RequestBase().request_base(baseinfo, testdata)

testcase\Invoice_Inspection\test_invoice_Inspection.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
utils\request_control.py:151: in request_base
    raise e
utils\request_control.py:145: in request_base
    raise e
utils\request_control.py:138: in request_base
    AssertionMangement().assert_result(assertion, result_json)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;utils.assert_control.AssertionMangement object at 0x000002A9B47E2960&gt;
expected = [{'equals': {'msg': '识别失败'}}], response = {'msg': '非法的sign'}
status_code = 200

    def assert_result(self, expected: list, response: dict, status_code=200):
        '''
        根据yaml的不同断言类型，调用不同断言方法获取断言结果
        :param expected:
        :param response:
        :param status_code: 断言状态码默认为200，如果需要断言其他状态码，调用时候传入其他即可
        :return:
        '''
        all_assert_flag = 0
        try:
            # 循环得到断言列表
            for yq in expected:
                for k, v in yq.items():
                    # 循环断言列表，得到每个列表的断言类型k和断言表达式v
                    if k == "contains":
                        all_assert_flag = all_assert_flag + self.contain_assert(v, response, status_code)
                    elif k == "equals":
                        all_assert_flag = all_assert_flag + self.equal_assert(v, response)
                    elif k == "sql":
                        all_assert_flag = all_assert_flag + self.db_assert(json.loads(v), response)
        except Exception as e:
            logs.info("请检查断言字段是否包含在接口返回的内容中")
            logs.info(f"异常信息:{e}")
            raise e
    
        if all_assert_flag == 0:
            logs.info('断言正常，测试成功')
            assert True
        if all_assert_flag != 0:
            logs.error('断言错误，测试失败')
&gt;           assert False
E           AssertionError

utils\assert_control.py:134: AssertionError</failure></testcase></testsuite></testsuites>